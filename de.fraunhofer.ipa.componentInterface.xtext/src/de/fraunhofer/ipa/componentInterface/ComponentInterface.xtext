// automatically generated by Xtext
grammar de.fraunhofer.ipa.componentInterface.ComponentInterface with org.eclipse.xtext.common.Terminals

import "http://www.example.org/componentInterface" 
import "http://www.example.org/ros" as ros
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ComponentInterface returns ComponentInterface:
	'ComponentInterface'
	'{'
		'name' name=EString
		('namespace' namespace=Namespace)?
		('publisher' RosTopicPublisher+=Publisher)?
		('subscriber' RosTopicSubscriber+=Subscriber)?
		('serviceServer' RosServiceServer+=ServiceServer)?
		('serviceClient' RosServiceClient+=ServiceClient)?
	'}';

	
Namespace returns ros::Namespace:
	GlobalNamespace | RelativeNamespace_Impl | PrivateNamespace;

GraphName returns ros::GraphName:
	STRING | 'GraphName' /* TODO: implement this rule and an appropriate IValueConverter */;

GlobalNamespace returns ros::GlobalNamespace:
	{ros::GlobalNamespace}
	'GlobalNamespace'
	'{'
		('parts' parts+=EString)?
	'}';

RelativeNamespace_Impl returns ros::RelativeNamespace:
	{ros::RelativeNamespace}
	'RelativeNamespace'
	'{'
		('parts' parts+=EString)?
	'}';

PrivateNamespace returns ros::PrivateNamespace:
	{ros::PrivateNamespace}
	'PrivateNamespace'
	'{'
		('parts' parts+=EString)?
	'}';

	
EString returns ecore::EString:
	STRING | ID;


Publisher returns Publisher:
	{Publisher}
	'Publisher'
	'{'
		('TopicName' TopicName=EString)?
		('TopicRef' TopicRef=[ros::Publisher|EString])?
		('NameSpace' NameSpace=[ros::Namespace|EString])?
	'}';

Subscriber returns Subscriber:
	{Subscriber}
	'Subscriber'
	'{'
		('TopicName' TopicName=EString)?
		('TopicRef' TopicRef=[ros::Subscriber|EString])?
		('NameSpace' NameSpace=[ros::Namespace|EString])?
	'}';

Publisher0 returns ros::Publisher:
	'Publisher'
	'{'
		'name' name=GraphName
		'message' message=[ros::TopicSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

TopicSpec returns ros::TopicSpec:
	{ros::TopicSpec}
	'TopicSpec'
	name=EString
	'{'
		('message' message=MessageDefinition)?
	'}';

MessageDefinition returns ros::MessageDefinition:
	{ros::MessageDefinition}
	'MessageDefinition'
	;

Subscriber0 returns ros::Subscriber:
	'Subscriber'
	'{'
		'name' name=GraphName
		'message' message=[ros::TopicSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

ServiceServer returns ServiceServer:
	{ServiceServer}
	'ServiceServer'
	'{'
		('ServiceName' ServiceName=EString)?
		('SrvRef' SrvRef=[ros::ServiceServer|EString])?
		('NameSpace' NameSpace=[ros::Namespace|EString])?
	'}';

ServiceClient returns ServiceClient:
	{ServiceClient}
	'ServiceClient'
	'{'
		('ServiceName' ServiceName=EString)?
		('SrvRef' SrvRef=[ros::ServiceClient|EString])?
		('NameSpace' NameSpace=[ros::Namespace|EString])?
	'}';

ServiceServer0 returns ros::ServiceServer:
	'ServiceServer'
	'{'
		'name' name=GraphName
		'service' service=[ros::ServiceSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

ServiceSpec returns ros::ServiceSpec:
	{ros::ServiceSpec}
	'ServiceSpec'
	name=EString
	'{'
		('request' request=MessageDefinition)?
		('response' response=MessageDefinition)?
	'}';

ServiceClient0 returns ros::ServiceClient:
	'ServiceClient'
	'{'
		'name' name=GraphName
		'service' service=[ros::ServiceSpec|EString]
		('namespace' namespace=Namespace)?
	'}';