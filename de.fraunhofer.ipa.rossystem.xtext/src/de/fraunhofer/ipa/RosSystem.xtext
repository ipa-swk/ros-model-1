// automatically generated by Xtext
grammar de.fraunhofer.ipa.RosSystem with org.eclipse.xtext.common.Terminals

import "http://www.example.org/rossystem" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.example.org/componentInterface" as componentInterface
import "http://www.example.org/ros" as ros


RosSystem returns RosSystem:
	{RosSystem}
	'RosSystem'
	'{'
		('Name' Name=EString)?
        ('RosComponent'  RosComponent+=[componentInterface::ComponentInterface|EString])?
		('TopicConnections' '{' TopicConnections+=TopicConnection ( "," TopicConnections+=TopicConnection)* '}' )?
		('ServiceConnections' '{' ServiceConnections+=ServiceConnection ( "," ServiceConnections+=ServiceConnection)* '}' )?
	'}';

Namespace returns ros::Namespace:
	GlobalNamespace | RelativeNamespace_Impl | PrivateNamespace;


TopicConnection returns TopicConnection:
	
	{TopicConnection}
	'TopicConnection'
	'{'		
		('From' From=[componentInterface::Publisher|EString])?
		('To' To=[componentInterface::Subscriber|EString])?
	'}';

ServiceConnection returns ServiceConnection:
	{ServiceConnection}
	'ServiceConnection'
	'{'
		('From' From=[componentInterface::ServiceServer|EString])?
		('To' To=[componentInterface::ServiceClient|EString])?
	'}';

EString returns ecore::EString:
	STRING | ID;

ComponentInterface returns componentInterface::ComponentInterface:
	'ComponentInterface'
	'{'
		'name' name=EString
		('publisher' RosTopicPublisher+=Publisher)?
		('subscriber' RosTopicSubscriber+=Subscriber)?
		('serviceServer' RosServiceServer+=ServiceServer)?
		('serviceClient' RosServiceClient+=ServiceClient)?
	'}';

Publisher returns componentInterface::Publisher:
	{componentInterface::Publisher}
	'Publisher'
	'{'
		('TopicName' TopicName=EString)?
		('TopicRef' TopicRef=[ros::Publisher|EString])?
		('NameSpace' NameSpace=[ros::Namespace|EString])?
	'}';

Subscriber returns componentInterface::Subscriber:
	{componentInterface::Subscriber}
	'Subscriber'
	'{'
		('TopicName' TopicName=EString)?
		('TopicRef' TopicRef=[ros::Subscriber|EString])?
		('NameSpace' NameSpace=[ros::Namespace|EString])?
	'}';

Publisher0 returns ros::Publisher:
	'Publisher'
	'{'
		'name' name=GraphName
		'message' message=[ros::TopicSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

GraphName returns ros::GraphName:
	'GraphName' /* TODO: implement this rule and an appropriate IValueConverter */;

TopicSpec returns ros::TopicSpec:
	{ros::TopicSpec}
	'TopicSpec'
	name=EString
	'{'
		('message' message=MessageDefinition)?
	'}';

MessageDefinition returns ros::MessageDefinition:
	{ros::MessageDefinition}
	'MessageDefinition'
	;

GlobalNamespace returns ros::GlobalNamespace:
	{ros::GlobalNamespace}
	'GlobalNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';

RelativeNamespace_Impl returns ros::RelativeNamespace:
	{ros::RelativeNamespace}
	'RelativeNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';

PrivateNamespace returns ros::PrivateNamespace:
	{ros::PrivateNamespace}
	'PrivateNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';

Subscriber0 returns ros::Subscriber:
	'Subscriber'
	'{'
		'name' name=GraphName
		'message' message=[ros::TopicSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

ServiceServer returns componentInterface::ServiceServer:
	{componentInterface::ServiceServer}
	'ServiceServer'
	'{'
		('ServiceName' ServiceName=EString)?
		('SrvRef' SrvRef=[ros::ServiceServer|EString])?
		('NameSpace' NameSpace=[ros::Namespace|EString])?
	'}';

ServiceClient returns componentInterface::ServiceClient:
	{componentInterface::ServiceClient}
	'ServiceClient'
	'{'
		('ServiceName' ServiceName=EString)?
		('SrvRef' SrvRef=[ros::ServiceClient|EString])?
		('NameSpace' NameSpace=[ros::Namespace|EString])?
	'}';

ServiceServer0 returns ros::ServiceServer:
	'ServiceServer'
	'{'
		'name' name=GraphName
		'service' service=[ros::ServiceSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

ServiceSpec returns ros::ServiceSpec:
	{ros::ServiceSpec}
	'ServiceSpec'
	name=EString
	'{'
		('request' request=MessageDefinition)?
		('response' response=MessageDefinition)?
	'}';

ServiceClient0 returns ros::ServiceClient:
	'ServiceClient'
	'{'
		'name' name=GraphName
		'service' service=[ros::ServiceSpec|EString]
		('namespace' namespace=Namespace)?
	'}';
